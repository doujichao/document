mysql

数据库类型：
1、面向对象数据库系统
2、对象关系数据库系统
3、关系数据库系统

select [distinct] listofcolumns
from listoftables
[where expression (predicates in cnf)]
[group by listofcolumns]
[having expression]
[order by listofcolumns]

查询执行过程：查询解析器 -------> 查询优化器-------> 代码生成解析器 ---->查询处理器
进行查询优化的4中技术：
	1、基于开销的优化
	2、启发式优化（公认的最优化）
	3、语义优化
	4、参数优化
	
查询的执行：在查询优化之后获取到最优化的数据，进行数据库系统的执行
		查询一般有两种策略：
			迭代
			解释执行
			
联结：外联结、内联结、叉积、并集、交集

SQL接口：接收网络连接，为每个用户创建线程，将SQL命令存入一个类结构中
解析器：构造一个用来在内存里代表查询语句的查询结构（树状结构）
查询优化器：采用“选取-投影-联结”策略
	1、通过计算where子句里的表达式来横向派出多余的数据
	2、只保留在属性（字段）清单里列出的，以及在最后执行连接子句时需要用到的属性，
		其他数据全部排除
	3、根据连接条件生成最终的查询结果
查询的执行:由一些列库函数进行实现
查询缓存：缓存查询结果
缓存和缓存区：
		
		
Mysql存储引擎：可以通过 ENGINE=引擎名称，来为每个表指定执行引擎
	1、MyISAM(默认):支持表级的并发控制锁，遵循ISAM原则(indexed sequential access method)指
		索引过的顺序访问方法，进行优化，同一个表隔离，追求速度
	2、BDB：支持页面即的并发控制锁，同一内存页面隔离
	3、InnoDB:支持记录级并发控制锁，同一记录隔离，事务选择
	
优化原则：
	1、常量替换
	2、无效条件消除
	3、范围检查
	
Mysql逻辑架构
	1、连接管理和安全性
		每个客户端连接都会在服务器进程中拥有一个线程
	2、优化与执行
	3、并发控制
		服务器层与存储引擎层
		1、读写锁，排他锁
		2、锁粒度，表锁，行锁
	4、	事务
		原子性
		一致性
		隔离性
		持久性
		隔离级别：
			READ UNCOMMITTED(读未提交)
			READ COMMITTED(读已提交)
			REPEATABLE READ(可重复读)
			SERIABLE(可串行化)
		死锁：和查询引擎有关
		事务日志：可以帮助提高事务的效率
		mysql事务：
			InnoDB
			NDB cluster
	5、多版本并发控制
		乐观并发控制
		悲观并发控制
		
数据库存储引擎：
	show create table book \G
	show table status like 'user' \G ：可以显示表的信息
			   Name: 表明
			 Engine: 存储引擎
			Version: 版本
		 Row_format: 行的格式(Dynamic,可变，Fixed,固定的，Compressed，只在压缩表中存在)
			   Rows: 表中的行数
	 Avg_row_length: 平均每行包含的字节数
		Data_length: 表数据的大小
	Max_data_length: 表数据的最大容量，该值和存储引擎有关
	   Index_length: 索引的大小
		  Data_free: 表示分配但是没有使用的空间，
	 Auto_increment: 下一个Auto_increment的值
		Create_time: 表的创建时间
		Update_time: 表数据的最后修改时间
		 Check_time: 使用chech table命令或myisamchk工具最后检查时间
		  Collation: 表的默认字符集和字符列排序规则
		   Checksum: 如果启用，保存的是整个表的实时校验和
	 Create_options: 创建表的其他选项
			Comment: 包含了一些其它额外信息
			
	1、InnoDB存储引擎（Mysql的默认事务型引擎）	
		特点：主要用来处理大量的短期事务，被设置为正常提交，很少被回滚
	2、MyISAM存储引擎
		特点：支持表级锁，修复，索引特性
		缺点：不支持奔溃后恢复，不支持行锁
	3、第三方存储引擎	
	
基准测试：
	目的：
		1、验证基于系统的一些列假设，确定这些假设是否符合实际情况
		2、重现系统中的某些异常行为，以解决这些异常
		3、测试系统当前的运行情况，如果不清楚系统当前的性能，就无法确定某些优化
			效果如何，也可以利用历史的基准测试结果来分析诊断一些无法预测的问题
		4、模拟比当前系统更高的负载，以找出系统随着压力增加而可能遇到的性能瓶颈	
		5、规划位来的业务增长，基准测试可以评估在项目未来的负载下，需要什么样的硬件
			需要多大容量的网络，以及其他相关资源，这有助于与降低系统升级和重大变更的风险
		6、测试应用适应可变环境的能力	
		7、测试不同的硬件、软件和操作系统配置
		8、证明新采购的设备是否配置正确
	策略：
		集成式：针对整个系统的整体测试
		单组件式：单独测试MySQL
	测试指标：
		吞吐量：单位时间内的事务处理数，通常使用单位为每秒事务数（TPS）
		响应时间或延迟：用于测试任务所需的整体时间
		并发性：同一时间浏览的web站点，或者任意时间有多少同时发生的并发请求
		可扩展性：
性能：完成某件任务所需要的时间度量，即，性能即响应时间		