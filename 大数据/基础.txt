0、java特点
	JVM			//java virtual machine ,java虚拟机
	JRE			//java	runtime enviroment,java运行时环境=jvm+核心类库
	JDK			//java development kit,java软件开发工具包	=jre + 开发工具包
	
	编写.*java	---->	.class	---> App
	
	跨平台（OS）
	JVM
	一次编译，到处运行
1、java oop
	封装
	继承
	多态
	实现
	类的继承
	
2、数据类型
	1、byte
	2、short
	3、int
	4、long
	5、float
	6、double
	7、char

hadoop
sqoop
hive
-----------------

hadoop

java

ZipOuputStream
------------------
大数据核心：分布式存储和分布式计算

分布式核心：套接字编程

网络负载

archivee

tar:
har:
jar:
war:
ear:

名称节点和数据节点：
	名称节点：存储元数据、元数据保存在内存中、保存文件，block、datanode之间的映射关系
	数据节点：存储文件内容，文件内容在磁盘，维护了blockid到datanode本地文件的映射关系
	
	名称节点：在HDFS中，名称节点（NameNode）负责管理分布式文件系统的命名空间（Namespace），保存了两个核心的数据结构，即FsImage和EditLog

	名称节点的启动：
		1.在启动时，系统会将FsImage中的内容加载到内存中去，之后再执行EditLog中的操作，使得内存中的数据和实际同步，存在内存中的支持客户端的读。
		2.一旦在内存中成功建立文件系统元数据的映射，则创建一个新的FsImage文件和一个空的EditLog文件
		3.名称节点起来之后，HDFS中的更新操作会重新写到EditLog文件中，因为FsImage文件一般都很大（GB级别的很常见），
		如果所有的更新操作都往FsImage文件中添加，这样会导致系统运行的十分缓慢，但是，如果往EditLog文件里面写就不会这样，
	
	第二名称空间
		是HDFS架构中的一个组成部分，它是用来保存名称节点中对HDFS 元数据信息的备份，并减少名称节点重启的时间。
	
	SecondaryNameNode让EditLog变小的工作流程：
	（1）SecondaryNameNode会定期和NameNode通信，请求其停止使用EditLog文件，暂时将新的写操作写到一个新的文件edit.new上来，这个操作是瞬间完成，上层写日志的函数完全感觉不到差别；
	（2）SecondaryNameNode通过HTTP GET方式从NameNode上获取到FsImage和EditLog文件，并下载到本地的相应目录下；
	（3）SecondaryNameNode将下载下来的FsImage载入到内存，然后一条一条地执行EditLog文件中的各项更新操作，使得内存中的FsImage保持最新；这个过程就是EditLog和FsImage文件合并；
	（4）SecondaryNameNode执行完（3）操作之后，会通过post方式将新的FsImage文件发送到NameNode节点上
	（5）NameNode将从SecondaryNameNode接收到的新的FsImage替换旧的FsImage文件，同时将edit.new替换EditLog文件，通过这个过程EditLog就变小了

设计协议
----------

位移运算符
	>> 有符号移动
	>>>无符号移动 最高为补0
	&  按位与
	|  按位或
	^  异或 异或同一个数字两次之后还是同一个数字
	~  按位取反
	
hashcode
----------------	
ctrl + shift + 上下箭头， 上下复制一行
shift + home 			   选中光标到行首内容
shift + end 			 选中光标到行首的内容
shift + tab 	
tab 

alt + tab			切换窗口
shift+alt+tab		反向切换窗口

alt					竖向选中文本

串行化
-------------------


ZipOuputStream

ZipInputStream

stack
----------------------
栈 
先进先出
push 		压栈
pop			弹栈


queue
-----------------------
先进先出
	FIFO


Debug
------------
f5 		//step into ，单步进入
f6 		//step over , 单步跳过
f7		//step return 单步返回

java里面表现数据
-----------------
1、十进制
	123
2、八进制
	02327
3、十六进制
	0x123674863DEF
	
线程
--------------------
		并发
		synchronized:
			synchronized xxx(){}:非静态方法，锁为调用对象this
								静态方法，锁为这个对象
			synchronized(O){}：同步代码块
		
		Thread{
			..
			yield		//放弃cpu抢占权
			join		//加入
			sleep 		//休眠
		}
		
		ArrayList		//数组
		Linkedlist		//链表
		
JVM
----------------------
	调整堆的大小
	java -Xms 100m 
		-Xmx 100m
		
	每个对象都有一个锁旗标，每个锁旗标维护了一个等待线程队列，这里都是在等待的线程
每个线程都在等待通知，notify()，notify会随机唤醒线程	
	wait()：当前线程进入等待队列，并释放锁旗标
	
ArrayList
---------------------------------
Array	 //容量概念

Object.hashcode();

(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);

新哈希

Node{
	int hash;  //newhash
	K k;		//key
	V v;		//value
}

1、先对key进行运算得到newhash，使用hash(key),oldhash >>> 16 ^ oldhash
2、定位桶
	newhash & (n-1)
3、判断key是否重复
		node.hash(newhash)
		
HashSet	--> HashMap --> [] + Linkedlist		
=：判断的是两个对象的内存地址

调整java虚拟机参数
	-Xss10		//栈空间
	-Xmx4g		//堆最大值
	-Xms4g		//堆初始值
	
	-Xmn==-XX:NewSize	//设置年轻代大小
	-XX:NewRatio=n		//设置年老代对年轻带的倍数，年老代>=年轻带
	-XX:SurvivorRatio=2	//设置伊甸区针对单个幸存去倍数
						//伊甸区>=单个幸村区
	
TCP/IP
-----------------------
		TCP:transfer control protocal		//传输控制协议
		IP	:internet protocal				//网络协议
		ftp:file transfer protocal 			//文件传输协议

OSI
--------------------------
	open system interconnect
	
	UDP：最大能发送64k协议；可以进行分包
七层协议
-----------------------------
		物理层
		数据链路层
		网络层		ip,ipx
		传输层		//UDP(UserDatagram protocal,用户数据报协议)
					//TCP(transfer control protocal,传输控制协议)
		会话层
		表示层
		应用层		http:// https:// ftp  smtp
		
		
TCP	协议建立连接的三次握手：做两次身份认证
--------------------------------
1、A发送syn信号给B
2、B接受A的syn信号x，构造一个ack信号(x+1),准备自己的syn信号y
3、B向A发送x+1和y信号
4、A接受B的ack+syn信号，对B的身份进行认证，同时构造ack(y+1)
5、A发送ack(y+1)发送给B
6、B可以认证A的身份

IP:PORT
----------------------------
多网卡
绑定端口到制定IP
0.0.0.0		所有网段
127.0.0.1 自循环网络

ip：端口
--------------------
ip：
ip+port

InetAddress
----------------------
只有地址，没有端口

InetSocketAddress
----------------------
InetSocketAddress包含端口和地址

Socket
-------------------------
DatagramSocket		//数据包套接字

屏广
-------------------------
	[设计报头]
	dest*port
	
串行化使用场景
----------------------------
将对象用哦过户网络间传输或者是本地化存储	
	
串行化（序列化）
---------------------------
将java对象转换成某种格式的（JVM定义的）的字节数组	

反串行化（反序列化）
--------------------------------------------------
将字节数组恢复成java对象
	反序列化对象时，是否经过构造函数？为什么？

	
java.io.Serializable
-------------------------------
		1、可串行化接口
		2、标识性接口
		3、JVM
		
		
-----------------------------
深度复制		

