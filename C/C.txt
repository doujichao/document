在window下使用gcc的条件
1、提前安装gcc这个软件
	
C的元素：
	1、include头文件是要告诉编译器，包含一个头文件
	2、在c语言中，任何库函数调用都需要提前包含头文件
	3、main函数有且只有一个
	4、System系统函数执行操作系统的命令，或者运行指定的命令需要include<stdlib.h>
C编译过程：
	预编译   ------>  编译  ---------> 链接
	.c 文件 							可执行程序
gcc -E -o a.e:预编译a.c文件，生成文件位a.e
	-S ：转换为汇编语言
	-c ：将代码编译为二进制的机器指令
	没有参数表示链接

计算机内存：
	用户区域：
	内核区域：操作系统
	eas ：寄存器
	寄存器的位数决定了CPU的位数
	
RISC与CISC CPU架构：
	RISC:精简指令集
	CISC:复杂指令集，一般来讲X86架构都是复杂指令的，AMD，intel就是X86指令
		linux就是基于X86的操作系统

SPARC
	SUN有自己的CPU，是基于SPARTC，其实就是一款RISC的CPU
	
CPU结构：运算器、控制器、寄存器	
32位操作系统，最大内存为4G	
	
预编译是将include包含的头文件内容替换到.c文件中，同时将代码中的注释删除
头文件类型：
	<头文件>，代表在系统目录下寻找相关头文件
	"头文件"，代表在当前目录下寻找相关文件
	
常量：程序中不可改变的量，常量在定义的时候必须给初值
#define:定义一个常量，C语言的常量为大写
const：也可以定义一个常量，C语言的常量，通常使用小写

b : bit		比特位	1B=8b
B : Byte	字节
WORD:		字 		1WORD=2B
DWORD:		双字	1DWORD=2WORD=4B=32b

编译指令 gcc 文件名 -o 输出文件
查看汇编指令：
	objdump -S -M intel 文件名

源码：
反码：正数反码不变，负数：符号位不变，其他位取反
补码：计算机存储的方式
scanf:键盘数据函数 scanf("%d",&a)读取一个整数值放入a中
printf输出int类型，
	%d输出一个有符号的整数，
	%u输出无符号整数
	%x输出16进制数
	%X用大写字母方式输出16进制数
	%o输出8进制数
	%p输出内存地址
	%c输出一个字符
	%f输出一个小数
无符号数：将符号位作为数的有效位

大端对齐与小端对齐：
	小端对齐：
	对于inter这种X86架构的复杂指令cpu，整数在内存中是倒着存放的
	低地址放地位，高地址放高位
	大端对齐：
		对于unix服务器的CPU，更多的是采用大端对齐
	
数据类型：
short	：2个字节
int		：4个字节
long	：
long long	：8个字节
unsigned int: 无符号数
char	: 1 个字节

volatile:
	代表一个可能被CPU指令之外的地方改变，编译器就不会针对这个变量去优化目标代码
register：
	变量在CPU寄存器里面，而不是在内存里面，但是register是建议型的指令，而不是命令型的

特殊字符：
	\a:警报
	\b:退格
	\r:回车
	\n:换行
	\t:制表符

指针基础：
	一个指针其实只是一个变量，存储数据在内存中的地址而不是存储数据本身
	空指针：当指针不指向任何数据的时候，也成为空指针
	声明指针：type(int) *iptr,a, -------a为变量，iptr为指针
	指针赋值：*iptr=100			--------100赋值给*iptr所指的位置
	对于数组来说，通常是将数组名当作一个不可变的指针来使用
	
泛型指针：并不指定特定具体的数据类型，void类型指针，在进行具体计算的时候需要进行类型转换
函数指针：指向可执行代码段或调用可执行代码段的信息块的指针

多维数组，a[][2] 在初始化的时候必须指定第一维的大小，因为我们想要访问任意一行的元素
	需要知道这一行需要跳几个元素

用途：
	1、用来引用数据集合
	2、作为函数参数，按引用传递	

	
// 链表
typedef struct listElmt_ { //定义结构体本名
	void *data;
	struct listElmt_ *next;
} ListElmt; //结构体别名

//定义函数
int f() {
	int a[10], *iptr;
	iptr = a;
	iptr[0] = 5;
	return 0;
}
注意：要访问第i个元素，可以使用a[i]表示，也可以使用*(a+i)表示

结构和数组
--------------------
	结构：通常是由各种各样的有序的元素组成的，可以被看成是单个连续的数据类型
	结构指针：
	
分配存储空间：
	声明一个变量：当声明一个变量的时候，编译器会根据变量的类型预留足够的内存空间
	运行时动态地分配存储空间