里氏替换原则：无论交换那个子类，程序都能够正常运行
	利用抽象类和接口从具体类中抽出抽象方法
	在将实例作为参数传递至类中，或者在类的字段中保存实例时，不适用具体类型，而是使用抽象类型和接口
开闭原则：对扩展开发，对修改关闭
	
设计原则：
	1、把变化和不变化的部分进行分开；
	2、针对接口编程，而不是针对实现编程
	3、多用组合，少用继承
	
设计的时候需要思考：
	1、我们目前知道什么

Iterator模式（迭代器设计模式）：
	类似于java遍历集合
	使用原因：使用迭代器可以将实现和遍历分开
	作用：编写可复用的类
	易混淆概念：
		下一个(next)：返回当前元素，并指向下一个元素
		最后一个(hasNext)：确认接下来是否可以调用next方法
		
适配器模式(Adapter):也被称为Wrapper模式，Wrapper有包装器的意思
	适配器模式有两种：
		1、类适配器模式(使用继承的适配器)
		作用：代码隐藏
		实现：通过继承来实现对对象的封装
		2、对象适配器模式(使用委托的适配器)
		实现：通过委托来实现
	Adapter模式中有以下登场角色：
		Target(对象)：负责定义所需的方法
		Client(请求者)：调用对象
		Adaptee(被适配者)：被适配的对象
		Adapter(适配)：使用Adaptee角色的方法来满足Target角色的需求
	使用时机：
		Adapter对现有的类进行适配，生成新的类，满足新的需求
		软件升级时维护新旧版本
		
Template Method(模板方法模式)：
	含义：带有模板功能的模式，组成模板的方法被定义在父类中，而这些方法是抽象方法
		所以，父类无法查看最终会如何实现，，唯一知道的是父类调用了这些方法
	使用角色：
		AbstractClass(抽象类)：声明在模板中使用的抽象方法
		ConcreteClass(具体类)：实现抽象类中的抽象方法
	优点：可以复用父类中的算法，减少出现问题的可能，和之后的工作量	
	父类和子类的一致性，符合里氏替换原则(无论交换那个子类，程序都能够正常运行)

Factory Method(工厂方法模式)：
	使用模板方法来生成实例，这就是Factory Method模式
	使用角色：
		Product(产品)：属于框架这一方，是一个抽象类，定义了Factory Method模式中生成的实例的接口
		Builder(创建者)：框架，负责工厂的生成实例的抽象逻辑
		ConcreteProduct(具体的产品)：具体加工，决定了具体的产品
		ConcreteBuilder(具体的创建者)：具体的架构，生成具体的产品
	生成实例---方法的三种实现方式：
		1、指定其为抽象方法，通过子类实现传入
		2、为其实现默认方法，默认方法实现之后，如果子类没有实现该方法，将进行默认处理
		3、在其中抛出异常，默认方法为抛出异常，这样一来，如果未在子类中实现该方法，程序就会报错

Singleton(单例模式)：
	public class Singleton {
    private static Singleton singleton=new Singleton();
    private Singleton(){
        System.out.println("生成一个实例");
    }
    public static Singleton getInstance(){
        return singleton;
    }
}

Prototype(原型模式)：		
	在不指定类名的前提下生成实例：
		1、对象种类繁多，无法将他们整合到一个类中
		2、难以根据类生成实例
		3、想解耦框架与生成的实例时
	使用角色：
		Prototype(原型)：定义复制现有实例来生成新实例的方法
		ConcretePrototype(具体的原型)；负责实现现有实例并生成新实例的方法
		Client(使用者)：负责使用复制实例生成新的实例
	即使没有java文件，也能复用该类才是关键	
	clone方法和java.lang.Clonable接口：
		java语言为我们准备了用于复制实例的clone方法，但是，想要调用clone方法
		被复制对象的类必须实现java.lang.Clonable接口，clone方法的返回值时复制出的新的实例
	浅复制：	
		clone方法进行的复制只是将被复制实例的字段值直接复制到新的实例中，例如：当字段中保存的是
		数组的时候，如果使用clone方法进行复制，则只会复制该数组的引用，并不会一一复制数组的元素
		
Builder(建造者模式):
	用于组装具有复杂结构的实例的模式
	使用角色：
		Builder(建造者)：定义用于生成实例的接口
		ConcreteBuilder(具体建造者)：实现Builder角色的接口的类
		Director(监工)：负责使用Builder角色的接口来说生成实例
		Client(使用者)：
		
Abstract Factory(抽象工厂模式)：
	抽象工厂的工作是：将“抽象零件”组装成“抽象产品”
	使用角色：
		AbstractProduct(抽像产品)：定义抽象工厂角色所生成的抽象零件和产品的接口
		AbstractFactory(抽象工厂)：定义用于生产抽象产品的接口
		Client(委托者)：调用AbstractFactory角色和AbstractProduct角色的接口进行工作
			对具体的零件、产品和工厂一无所知
		ConcreteProduct(具体的产品)：负责实现AbstractProduct角色的接口
		ConcreteFactory(具体工厂)：负责实现AbstractFactory角色的接口
			
生成实例的方法介绍：
	1、new：使用new关键字来生成实例
	2、clone：可以通过实现Cloneable接口来调用clone方法，该方法为浅克隆
	3、newInstance：可以通过Class.newInstance方法来创建实例
	
Bridge模式(桥梁模式):将类的功能层次结构和类的实现层次结构连接起来，采用委托的模式来实现桥梁模式
	类的功能层次结构：增加新功能从而产生的层次结构，父类有基本功能，在子类中增加新的功能
	类的实现层次结构：增加新的实现的时候产生的层次结构
	Abstraction(抽象化)：属于类的‘功能’层次结构的最上层，定义了基本的功能
	RefinedAbstraction(改善后的抽象化)：增加了新的功能的角色
	Implementor(实现者)：属于类的‘实现’层次最上层，定义了用于实现Abstraction角色的接口
	ConcreteImplementor(具体实现者)：该角色负责实现在Implementor角色中定义的接口
	继承是强关联关系，委托是弱关联关系
	
Strategy(策略模式)：能够整体的替换算法，让我们轻松的以不同的算法去解决同一个问题
	定义：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户
	使用角色：
		Strategy(策略)：实现策略所必须的接口
		ConcreteStrategy(具体的策略)：负责实现Strategy角色的接口
		Context(上下文)：保存了ConcreteStrategy角色去实现需求
	使用委托比使用继承更好，可以设计一个算法的通用接口，通过构造函数或者set方法等方式设置
		策略，从而达到代码的复用
		
Composite(组合模式)：能够使容器和内容具有一致性，创造除递归结构
	使用角色：
	Leaf(树叶)：表示内容的角色
	Composite(复合物)：表演器的角色，可以放入Leaf角色和Composite角色
	Component(组件)：使Leaf和Composite具有一致性，是Leaf和Composite的父类
	Client:使用Composite的角色

Decorator(装饰者模式)：不断的为对象添加装饰的设计模式
	使用角色：
	Component(组件)：增加功能时的核心角色
	ConcreteComponent(实现组件)：实现了Component角色定义的接口的具体蛋糕
	Decorator(装饰物)：与Component角色有相同的接口，内部保存了被装饰对象角色，装饰角色知道要装饰对象
	ContreteDecorator(具体的装饰物)：
	在Decorator采用了委托的方法，使类之间形成弱关联关系

Visitor(访问者模式)：数据结构和处理分离开，集中处理在Visitor通过java类型寻找方法来分支每种结果的处理
	使用角色：
	Visitor(访问者)：负责对数据结构中每个具体的元素声明一个用于方法的方法
	ConcreteVisitor(具体的访问者)：负责实现所有的方法
	Element(元素)：Visitor角色的访问对象，声明了accept方法
	ConcreteElement(实际元素)：负责实现Element角色所定	义的接口
	ObjectStructure(对象结构)：负责处理Element角色的集合
	双重分发：ConcreteElement和ConcreteVisitor这两个角色共同决定了实际处理的进行
	目的：将处理从数据结构中进行分离，注意：保存数据结构和以数据结构为基础进行处理是两种不同的概念
	访问者模式符合开闭原则，通过接口可以在不修改类的基础上对类的新增功能
Chain of Responsibility模式(责任链模式)：将多个对象组成一条责任链，然后按照他们在责任链上的顺序一个
	地找出到底应该谁来负责处理。
	使用角色：
	Handle(处理者)：定义了处理请求的接口
	ConcreteHandler(具体的处理者)：处理请求的具体角色
	Client(请求者)：第一个向ConcreteHandler角色发送请求的角色
	
Facade(窗口模式)：为一些错综复杂的类整理出高层接口，通过高层接口访问整个系统
	使用角色：
		Facade(窗口)：代表构成系统许多角色的简单窗口
		构成系统的许多其他角色：Facade角色调用其他角色进行工作
		Client(请求者)：负责调用Facade角色
		
Mediator(中介者模式或调停者模式)：组员向仲裁者报告，仲裁者向组员下达指示
	使用角色：
		Mediator(仲裁者，中介者)：负责定义与Colleage角色进行通讯和做出角色的接口
		ConcreteMediator(具体的仲裁者、中介者)：负责实现Mediator角色的接口，负责实际做出决定
		Colleague(同事)：负责定义与Mediator角色进行通讯的接口
		ConcreteMediator(具体的同事)：负责实现Colleague角色的接口
	作用：可以将控制集中到一个类中，方便进行调试
	
	
Observer模式(观察者模式)：当观察对象的状态发生变化的时候，会通知给观察者
	定义：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都回收到通知并
		自动更新
	使用角色：	
		Subject(观察对象)：表示观察对象，负责注册观察者和删除观察者的方法
		ConcreteSubject(具体的观察对象)：当自身状态发生变化后，通知所有已经注册的Observer角色
		Obserber(观察者):负责接收来自Subject角色的状态变化的通知
		ConcreteObserver(具体的观察者)：会获取观察对象的最新状态
	也被称为Publish-Subscribe(发布-订阅)模式
	MVC中Model和View的关系类似于Subject和Observer关系
	java.util.Observer和java.util.Observable是java实现的观察者模式
	
Memento(备忘录模式)：可以实现撤销、重做、历史纪录、快照功能
	使用角色：
		Originator(生产者)：角色会保存自己的最新状态时生成Memento角色，当时把以前的Memento角色传递给
			Originator角色时，会将自己恢复至生成该Memento角色时的状态
		Memento(纪念品)：Memento角色会将Originator角色的内部信息整合在一起	
			Memento角色一般会有两种接口：
				wide interface---宽接口：所有用于恢复对象状态信息的方法集合
				marrowinterface--窄接口：
		Caretaker(负责人)：	当负责人想要保存当前的状态的时候，会通知Originator角色，Originator角色在接收
			到通知后会产生Memento角色的实例，并将其返回给Caretaker
State(状态模式)：用类表示状态
	使用角色：
		State(状态)：定义了根据不同状态进行不同处理的接口
		ConcreteState(具体状态)：表示各个具体状态
		Context(状况、前后关系，上下文)：持有表示当前状态的ConcreteState
	重点是对于状态改变的控制	
Flyweight(享元模式)：作用是为了让对象变轻，重点在于共享元素
	使用角色：
		Flyweight(轻量级)：通过Flyweight角色表示可能会被共享的类
		FlyweightFactory(轻量级工厂)：由此工厂生产的实例可以实现共享
		Client(请求者)：使用工厂来生成Flyweight角色
	使用享元模式的可能地方：如果被改变，就会对多个地方产生影响，有多个地方会改变
	用自己的话来说就是：改变一个地方会同时改变同一个地方的相同元素
	Intrinsic与Extrinsic:
		Intrinsic:应当共享的信息，本质的，固有的，不依赖实例的状态，任何情况都不会改变
		Extrinsic:不应当共享的信息，外在的，实例的位置、状态发生改变时会变化的信息
		
Proxy(代理模式)：只在必要的时候生成实例
	使用角色：
	Subject(主体)：代表Proxy角色和RealSubject角色之间具有一致性的接口
	Proxy(代理人)：代理角色会尽量自己处理，当自己不能处理的时候交给RealSubject处理
	RealSubject(实际的主体)：在代理人无法胜任的工作时出场
	Client(请求者)：
	Proxy模式有多种变化形式：
		1、Virtual Proxy(虚拟代理)
		2、Remote Proxy(远程代理)
		3、Access Proxy(相当于在RealSubject角色的功能时设置访问限制)
Command(命令模式)：一个类在进行工作时会调用自己或是其他类的方法，虽然调用结果会反应在对象的状态中，但是
		不会留下工作历史记录
	使用角色：
		Command(命令)：负责定义命令的接口
		ConcreteCommand(具体的命令)：负责实现Command角色中定义的接口
		Receiver(接收者)：Command角色执行命令的对象，也成为命令接收者
		Client()：负责生成ConcreteCommand角色并分配Receiver角色
		Invoker(发动者)：调用Command角色中定义的接口API
		
Interpreter(解释器模式)：
	<program> ::=program<command list>
		定义了程序<program>,即program关键词后面跟着命令列表
	<command list>::=<command>* end
		定义了命令列表，即重复0次以上<command>,接着end关键子
	<command> ::= <repeat command> | <primitive command>
		定义命令<command>：即所谓的<repeat command>或者<primitive command>
	<repeat command>::= repeat <number> <command list>
		定义循环命令：即关键词 repeat 关键词后面跟着循环次数number和需要循环的命令列表
	<primitive command >::= go | right | left
	词法分析时从文字中得到标记
	语法分析则是根据标记推导出语法树
	使用角色：
		AbstractExpression(抽象表达式)：定义了语法树节点的共同API
		TerminalExpression(终结符表达式)：对应BNF中的终结表达式
		NonterminalExpression(非终结表达式)：对应BNF中的非终结表达式
		Context(文脉，上下文)