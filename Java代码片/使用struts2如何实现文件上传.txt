<span style="font-size:18px;">文件上传页面中，包含两个表单域，文件标题和文件浏览域――当然，为了能完成文件上传，我们应该将这两个表单域所在表单的enctype属性设置为multipart/form-data。该页面的代码如下所示：
<html xmlns=" http://www.w3.org/1999/xhtml";>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GBK" />
<title>简单的文件上传</title>
</head>
<body>
<!-- 为了完成文件上传，设置该表单的enctype属性为multipart/form-data。 -->
<form action="upload.action" method="post" enctype="multipart/form-data">
   文件标题：<input type="text" name="title" /><br>
   选择文件：<input type="file" name="upload" /><br>
 <input value="上传" type="submit" />
</form>
</body>
</html>
上面页面只是一个普通的HTML页面，没有任何的动态部分，当该页面提交请求时，请求发送到upload.action，这是一个Struts2的Action。
Struts2的Action无需负责处理HttpServletRequest请求，正如前面介绍的，Struts2的Action已经与Servlet API彻底分离了，Struts2框架负责解析HttpServletRequest请求中的参数，包括文件域。Struts2使用File类型来封装文件域，下面是处理上传请求的Action类代码。
public class UploadAction extends ActionSupport
{
 //封装文件标题请求参数的属性
 private String title;
 //封装上传文件域的属性
     private File upload;
 //封装上传文件类型的属性
     private String uploadContentType;
 //封装上传文件名的属性
    private String uploadFileName;
 //接受依赖注入的属性
     private String savePath;
 //接受依赖注入的方法
     public void setSavePath(String value)
 {
         this.savePath = value;
     }
 //返回上传文件的保存位置
     private String getSavePath() throws Exception
 {
         return ServletActionContext.getRequest().getRealPath(savePath);
     }
 //文件标题的setter和getter方法
 public void setTitle(String title)
{
  this.title = title;
 }
 public String getTitle()
{
  return (this.title);
 }
 //上传文件对应文件内容的setter和getter方法
 public void setUpload(File upload)
{
  this.upload = upload;
 }
 public File getUpload()
{
  return (this.upload);
 }
 //上传文件的文件类型的setter和getter方法
 public void setUploadContentType(String uploadContentType)
{
  this.uploadContentType = uploadContentType;
 }
 public String getUploadContentType()
{
  return (this.uploadContentType);
 }
 //上传文件的文件名的setter和getter方法
 public void setUploadFileName(String uploadFileName)
{
  this.uploadFileName = uploadFileName;
 }
 public String getUploadFileName()
{
  return (this.uploadFileName);
 }
 @Override
    public String execute() throws Exception
 {
  //以服务器的文件保存地址和原文件名建立上传文件输出流
  FileOutputStream fos = new FileOutputStream(getSavePath() + "\\" + getUploadFileName());
  //以上传文件建立一个文件上传流
  FileInputStream fis = new FileInputStream(getUpload());
  //将上传文件的内容写入服务器
  byte[] buffer = new byte[1024];
  int len = 0;
  while ((len = fis.read(buffer)) > 0)
  {
   fos.write(buffer , 0 , len);
  }
         return SUCCESS;
    }
}
上面的Action与普通的Action并没有太大的不同，一样提供了upload和title两个属性，这两个属性分别对应前面的两个表单域的name属性，用于封装两个表单域的请求参数。
值得注意的是：上面Action还包含了两个属性：uploadFileName和uploadContentType，这两个属性分别用于封装上传文件的文件名、上传文件的文件类型。这两个属性，体现了Struts2设计的灵巧、简化之处，Action类直接通过File类型属性直接封装了上传文件的文件内容，但这个File属性无法获取上传文件的文件名和文件类型，所以Struts2直接将文件域中包含的上传文件名和文件类型的信息封装到uploadFileName和uploadContentType属性中。可以认为：如果表单中包含一个name属性为xxx的文件域，则对应Action需要使用三个属性来封装该文件域的信息：
 类型为File的xxx属性封装了该文件域对应的文件内容。
 类型为String的xxxFileName属性封装了该文件域对应的文件的文件名。
 类型为String的xxxContentType属性封装了该文件域对应的文件的文件名。
通过上面的三个属性，可以更简单地实现文件上传，所以在execute方法，可以直接通过调用getXxx()方法来获取上传文件的文件名、文件类型和文件内容。
除此之外，上面Action中还包含了一个savePath的属性，该属性的值通过配置文件来设置，从而允许动态设置该属性的值――这也是典型的依赖注入。
提示：Struts2的Action中的属性，功能非常丰富，除了可以用于封装HTTP请求参数，也可以封装Action的处理结果。不仅仅如此，Action的属性的还可通过在Struts2配置文件进行配置，接收Struts2框架的注入，允许在配置文件中为该属性动态指定值。
配置文件上传的Action
配置Struts2文件上传的Action与配置普通Action并没有太大的不同，一样是指定该Action的name，以及该Action的实现类。当然，还应该为该Action配置<result .../>元素。与之前的Action配置存在的一个小小区别是该Action还配置了一个<param .../>元素，该元素用于为该Action的属性动态分配属性值。
下面是该应用的struts.xml配置文件代码。
<?xml version="1.0" encoding="UTF-8"?>
<!-- 指定Struts2配置文件的DTD信息 -->
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
" http://struts.apache.org/dtds/struts-2.0.dtd";>
<struts>
 <!-- 指定国际化资源文件的baseName为globalMessages -->
 <constant name="struts.custom.i18n.resources" value="globalMessages"/>
 <!-- 设置该应用使用的解码集 -->
 <constant name="struts.i18n.encoding" value="GBK"/>
 <package name="lee" extends="struts-default">
  <!-- 配置处理文件上传的Action -->
  <action name="upload" class="lee.UploadAction">
   <!-- 动态设置Action的属性值 -->
             <param name="savePath">/upload</param>
   <!-- 配置Struts2默认的视图页面 -->
   <result>/succ.jsp</result>
  </action>
 </package>
</struts>
上面配置文件除了使用<param .../>元素设置了upload Action的savePath属性值外，与前面的Action几乎完全一样――这再次体现了Struts2的简单设计。
提示：上面配置文件还设置了一个struts.i18n.encoding的常量，该常量设置解析请求参数时所用的解码集。为了处理中文请求参数，故此处才用GBK解码集。
下面看web.xml文件的配置：
<?xml version="1.0" encoding="UTF-8"?>
<!-- 指定Web应用配置文件的Schema信息 -->
<web-app id="WebApp_9" version="2.4" xmlns=" http://java.sun.com/xml/ns/j2ee";
xmlns:xsi=" http://www.w3.org/2001/XMLSchema-instance";
xsi:schemaLocation=" http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd";>
 <!-- 定义Struts2的核心Filter -->
     <filter>
         <filter-name>struts</filter-name>
         <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
     </filter>
 <!-- 定义Struts2核心Filter拦截的URL -->
     <filter-mapping>
         <filter-name>struts</filter-name>
         <url-pattern>/*</url-pattern>
     </filter-mapping>
 <!-- 配置Struts2的CleanUp的Filter -->
     <filter>
         <filter-name>struts-cleanup</filter-name>
         <filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
     </filter>
 <!-- 定义Struts2的CleanUp Filter拦截的URL -->
     <filter-mapping>
         <filter-name>struts-cleanup</filter-name>
         <url-pattern>/*</url-pattern>
     </filter-mapping>
</web-app>
可能读者已经注意到了上面配置文件中增加了ActionContextCleanUp的配置，这个类也是一个Filter，它的作用是方便Struts2与Sitemesh的整合，与文件上传本来没有太大关系。此处也加载了该Filter的原因是：笔者在开发Struts2的文件上传应用过程中，发现有时候会出现一些未知的异常，但加入了该Filter配置后，系统一切正常。
提示：在文件上传应用中加载ActionContextCleanUp的配置不会引起任何异常，因为该类本来就是 FilterDispatcher的辅助类。
配置了该Web应用后，如果我们在如图6.7所示的页面中输入文件标题，并浏览到需要上传的文件，然后单击“上传”按钮，该上传请求将被UploadAction处理，处理结束后转入succ.jsp页面，该页面使用了简单的Struts2标签来显示上传的图片。
succ.jsp页面的代码如下：
<%@ page language="java" contentType="text/html; charset=GBK"%>
<!-- 导入Struts2的标签库 -->
<%@taglib prefix="s" uri="/struts-tags"%>
<html>
    <head>
        <title>上传成功</title>
    </head>
    <body>
        上传成功!<br>
  <!-- 输出上传的表单里的文件标题属性 -->
  文件标题:<s:property value=" + title"/><br>
  <!-- 根据上传文件的文件名，在页面上显示上传的图片 -->
  文件为：<img src="<s:property value="'upload/' + uploadFileName"/>"/><br>
    </body>
</html>
上传成功应该可以看到文件上传的图片</span>