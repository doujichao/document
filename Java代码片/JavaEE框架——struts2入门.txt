<pre code_snippet_id="1857819" snippet_file_name="blog_20160830_9_5105398" name="code" class="html"><span style="color:#330033;">package com.interceptor;
 
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.Interceptor;
 
public class MyInterceptor1 implements Interceptor {
    public void init() {// 覆盖Interceptor接口中的init函数
        System.out.println("拦截器已经被加载");
    }
 
    public void destroy() {// 覆盖Interceptor接口中的destroy函数
        System.out.println("destroy");
    }
 
    /* 覆盖Interceptor接口中的intercept函数 */
    public String intercept(ActionInvocation invocation) throws Exception {
        System.out.println("调用intercept方法");
        /* invocation.invoke()方法检查是否还有拦截器 有的话继续调用余下的拦截器 没有了则执行action的业务逻辑 */
        String result = invocation.invoke();
        return result;
    }
}</span></pre>