前端技术架构规范-通讯层
	1、渠道前后端分离部署
		前端资源部署于web服务器，对服务器上的前端资源进行统一管理
		客户端通过互联网访问，通讯数据格式为json
	2、客户端分为通用浏览器和客户端浏览器两种环境
		客户端app应用中，前端代码溢出开发，多处运行，不同app应用之间
		交易资源包共享
		web端应用中，不同渠道应用共享前端技术

前端技术架构规范-基础层
	1、声明式的渲染功能
		尽可能避免手动操作，或者说是可变的命令式操作，希望尽可能的让DOM
		的更新操作是自动挡，状态变化的时候它就应该自动更新到正确的状态
	2、组件系统
		将一个大型的界面切分成一个一个更小的可控单元，并提供组件之间的时间传播机制
	3、MVVM
		开发人员专注于业务逻辑和数据的开发，设计人员可以专注于页面设计
	4、数据绑定
		双向数据流
	5、虚拟DOM
		Virtual dom
前端技术架构规范-扩展层
	1、常用模块和自定义扩展模块
		预置常用模块有，专司的表单提交、数据展示、前端校验的功能模块；专司页面跳转的前端路由模块
		也支持自定义扩展模块和第三发模块
	2、模块管理，代码打包，功能分包
		开发时，组件之间的相互引用，模块之间的项目依赖，有模块管理工具来合并、混淆、压缩
		发布时，再按指定功能，将一个前端应用发布成一个有一个功能资源包
前端技术架构规范-ui层
	1、丰富的组件
	2、统一的ui规范
		统一的视觉体验、交互体验，保证了应用的项目内部，项目之间都能保持高度的视觉一致性
	3、严格控制的bundle体积
	4、灵活转换的样式主题
	5、支持typeScript
		
		
VUE的核心思想：数据驱动（是指视图是由数据驱动生成，我们对视图的修改不会直接操作DOM，而是通过修改数据）
数据双向绑定：采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持
			各个属性的setter和getter，再数据变动时发布消息给订阅者，触发相应的监听回调
			
Vue渲染的整个过程：
	1、Vue初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化data
		props，computed，watcher等等
	2、挂在最核心的2个方法：
		vm._render和vm._update
	3、编译会将template解析成render函数
		Vue.runtime.js版本会直接使用render函数渲染
	4、render过程就是通过createElement方法并返回的vnode(虚拟节点)，它是一个服务ast标准的虚拟Node
	5、Patch过程生成的DOM节点，并将其挂在到页面上
	